plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
    id 'eclipse'
    id 'idea'
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.7.10'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archivesBaseName
version = project.mod_version
group = 'com.teamwizardry.wizardry'

repositories {
    mavenCentral()
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Ladysnake Libs"
        url = "https://ladysnake.jfrog.io/artifactory/mods"
    }
    maven { url = "https://s01.oss.sonatype.org/content/repositories/snapshots" }
    mavenLocal()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modCompileOnly files("lib/iris-mc1.19.2-1.5.2.jar")

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
    modImplementation "dev.emi:trinkets:${project.trinkets_version}"

//    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${project.cardinal_components_version}"
//    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${project.cardinal_components_version}"

    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_components_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_components_version}"

    [
            "com.teamwizardry.librarianlib:mosaic:${liblib_version}",
            "com.teamwizardry.librarianlib:glitter:${liblib_version}",
            "com.teamwizardry.librarianlib:etcetera:${liblib_version}"
    ].each {
        modImplementation(it)
    }
}

loom {
    mixin.defaultRefmapName.set("hooked.refmap.json")

    runConfigs.configureEach {
        vmArg("-javaagent:$buildDir/agent/mixin.jar")
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 16
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    it.kotlinOptions {
        jvmTarget = 16
        javaParameters = true
        freeCompilerArgs = ['-Xjvm-default=enable']
    }
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {

    }
}

tasks.register("copyMixinAgent", Sync) {
    from(configurations.runtimeClasspath)
    include("sponge-mixin-*")
    into(file("$buildDir/agent"))
    eachFile {
        name = "mixin.jar"
    }
}

processResources {
    dependsOn(copyMixinAgent)
}
